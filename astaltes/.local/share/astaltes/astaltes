#!/usr/bin/gjs -m

// ../../../../usr/share/astal/gjs/gtk4/index.ts
import Astal6 from "gi://Astal?version=4.0";
import Gtk4 from "gi://Gtk?version=4.0";
import Gdk2 from "gi://Gdk?version=4.0";

// ../../../../usr/share/astal/gjs/variable.ts
import Astal3 from "gi://AstalIO";

// ../../../../usr/share/astal/gjs/binding.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;
var binding_default = Binding;

// ../../../../usr/share/astal/gjs/time.ts
import Astal from "gi://AstalIO";
var Time = Astal.Time;
function interval(interval2, callback) {
  return Astal.Time.interval(interval2, () => void callback?.());
}
function timeout(timeout2, callback) {
  return Astal.Time.timeout(timeout2, () => void callback?.());
}

// ../../../../usr/share/astal/gjs/process.ts
import Astal2 from "gi://AstalIO";
var Process = Astal2.Process;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal2.Process.subprocessv(cmd) : Astal2.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal2.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal2.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../usr/share/astal/gjs/variable.ts
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal3.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = binding_default.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval2, exec, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval2;
    this.pollTransform = transform;
    if (typeof exec === "function") {
      this.pollFn = exec;
      delete this.pollExec;
    } else {
      this.pollExec = exec;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var { derive } = Variable;
var variable_default = Variable;

// ../../../../usr/share/astal/gjs/_astal.ts
var noImplicitDestroy = Symbol("no no implicit destroy");
var setChildren = Symbol("children setter method");
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof binding_default ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof binding_default);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function construct(widget, config) {
  let { setup, child, children = [], ...props } = config;
  if (children instanceof binding_default) {
    children = [children];
  }
  if (child) {
    children.unshift(child);
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  const bindings = Object.keys(props).reduce((acc, prop) => {
    if (props[prop] instanceof binding_default) {
      const binding = props[prop];
      delete props[prop];
      return [...acc, [prop, binding]];
    }
    return acc;
  }, []);
  const onHandlers = Object.keys(props).reduce((acc, key) => {
    if (key.startsWith("on")) {
      const sig = kebabify(key).split("-").slice(1).join("-");
      const handler = props[key];
      delete props[key];
      return [...acc, [sig, handler]];
    }
    return acc;
  }, []);
  const mergedChildren = mergeBindings(children.flat(Infinity));
  if (mergedChildren instanceof binding_default) {
    widget[setChildren](mergedChildren.get());
    widget.connect("destroy", mergedChildren.subscribe((v) => {
      widget[setChildren](v);
    }));
  } else {
    if (mergedChildren.length > 0) {
      widget[setChildren](mergedChildren);
    }
  }
  for (const [signal, callback] of onHandlers) {
    const sig = signal.startsWith("notify") ? signal.replace("-", "::") : signal;
    if (typeof callback === "function") {
      widget.connect(sig, callback);
    } else {
      widget.connect(sig, () => execAsync(callback).then(print).catch(console.error));
    }
  }
  for (const [prop, binding] of bindings) {
    if (prop === "child" || prop === "children") {
      widget.connect("destroy", binding.subscribe((v) => {
        widget[setChildren](v);
      }));
    }
    widget.connect("destroy", binding.subscribe((v) => {
      setProp(widget, prop, v);
    }));
    setProp(widget, prop, binding.get());
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  Object.assign(widget, props);
  setup?.(widget);
  return widget;
}
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctors2, ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    if (isArrowFunction(ctors2[ctor]))
      return ctors2[ctor](props);
    return new ctors2[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}

// ../../../../usr/share/astal/gjs/gtk4/astalify.ts
import Gtk from "gi://Gtk?version=4.0";
import Gdk from "gi://Gdk?version=4.0";
var type = Symbol("child type");
var dummyBulder = new Gtk.Builder();
function _getChildren(widget) {
  if ("get_child" in widget && typeof widget.get_child == "function") {
    return widget.get_child() ? [widget.get_child()] : [];
  }
  const children = [];
  let ch = widget.get_first_child();
  while (ch !== null) {
    children.push(ch);
    ch = ch.get_next_sibling();
  }
  return children;
}
function _setChildren(widget, children) {
  children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
  for (const child of children) {
    widget.vfunc_add_child(
      dummyBulder,
      child,
      type in child ? child[type] : null
    );
  }
}
function astalify(cls, config = {}) {
  Object.assign(cls.prototype, {
    [setChildren](children) {
      const w = this;
      for (const child of config.getChildren?.(w) || _getChildren(w)) {
        if (child instanceof Gtk.Widget) {
          child.unparent();
          if (!children.includes(child) && noImplicitDestroy in this)
            child.run_dispose();
        }
      }
      if (config.setChildren) {
        config.setChildren(w, children);
      } else {
        _setChildren(w, children);
      }
    }
  });
  return {
    [cls.name]: (props = {}, ...children) => {
      const widget = new cls("cssName" in props ? { cssName: props.cssName } : {});
      if ("cssName" in props) {
        delete props.cssName;
      }
      if (props.noImplicitDestroy) {
        Object.assign(widget, { [noImplicitDestroy]: true });
        delete props.noImplicitDestroy;
      }
      if (props.type) {
        Object.assign(widget, { [type]: props.type });
        delete props.type;
      }
      if (children.length > 0) {
        Object.assign(props, { children });
      }
      return construct(widget, setupControllers(widget, props));
    }
  }[cls.name];
}
function setupControllers(widget, {
  onFocusEnter,
  onFocusLeave,
  onKeyPressed,
  onKeyReleased,
  onKeyModifier,
  onLegacy,
  onButtonPressed,
  onButtonReleased,
  onHoverEnter,
  onHoverLeave,
  onMotion,
  onScroll,
  onScrollDecelerate,
  ...props
}) {
  if (onFocusEnter || onFocusLeave) {
    const focus = new Gtk.EventControllerFocus();
    widget.add_controller(focus);
    if (onFocusEnter)
      focus.connect("enter", () => onFocusEnter(widget));
    if (onFocusLeave)
      focus.connect("leave", () => onFocusLeave(widget));
  }
  if (onKeyPressed || onKeyReleased || onKeyModifier) {
    const key = new Gtk.EventControllerKey();
    widget.add_controller(key);
    if (onKeyPressed)
      key.connect("key-pressed", (_, val, code, state) => onKeyPressed(widget, val, code, state));
    if (onKeyReleased)
      key.connect("key-released", (_, val, code, state) => onKeyReleased(widget, val, code, state));
    if (onKeyModifier)
      key.connect("modifiers", (_, state) => onKeyModifier(widget, state));
  }
  if (onLegacy || onButtonPressed || onButtonReleased) {
    const legacy = new Gtk.EventControllerLegacy();
    widget.add_controller(legacy);
    legacy.connect("event", (_, event) => {
      if (event.get_event_type() === Gdk.EventType.BUTTON_PRESS) {
        onButtonPressed?.(widget, event);
      }
      if (event.get_event_type() === Gdk.EventType.BUTTON_RELEASE) {
        onButtonReleased?.(widget, event);
      }
      onLegacy?.(widget, event);
    });
  }
  if (onMotion || onHoverEnter || onHoverLeave) {
    const hover = new Gtk.EventControllerMotion();
    widget.add_controller(hover);
    if (onHoverEnter)
      hover.connect("enter", (_, x, y) => onHoverEnter(widget, x, y));
    if (onHoverLeave)
      hover.connect("leave", () => onHoverLeave(widget));
    if (onMotion)
      hover.connect("motion", (_, x, y) => onMotion(widget, x, y));
  }
  if (onScroll || onScrollDecelerate) {
    const scroll = new Gtk.EventControllerScroll();
    scroll.flags = Gtk.EventControllerScrollFlags.BOTH_AXES | Gtk.EventControllerScrollFlags.KINETIC;
    widget.add_controller(scroll);
    if (onScroll)
      scroll.connect("scroll", (_, x, y) => onScroll(widget, x, y));
    if (onScrollDecelerate)
      scroll.connect("decelerate", (_, x, y) => onScrollDecelerate(widget, x, y));
  }
  return props;
}

// ../../../../usr/share/astal/gjs/gtk4/app.ts
import GLib from "gi://GLib?version=2.0";
import Gtk2 from "gi://Gtk?version=4.0";
import Astal4 from "gi://Astal?version=4.0";

// ../../../../usr/share/astal/gjs/overrides.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps, Application }) => {
  patch(Apps.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland, Monitor, Workspace }) => {
  patch(Hyprland.prototype, "binds");
  patch(Hyprland.prototype, "monitors");
  patch(Hyprland.prototype, "workspaces");
  patch(Hyprland.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris, Player }) => {
  patch(Mpris.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp, Audio, Video }) => {
  patch(Wp.prototype, "endpoints");
  patch(Wp.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});

// ../../../../usr/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons)
        app.add_icons(icons);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../usr/share/astal/gjs/gtk4/app.ts
Gtk2.init();
GLib.unsetenv("LD_PRELOAD");
await import("gi://Adw?version=1").then(({ default: Adw }) => Adw.init()).catch(() => void 0);
var app_default = mkApp(Astal4.Application);

// ../../../../usr/share/astal/gjs/gtk4/widget.ts
import Astal5 from "gi://Astal?version=4.0";
import Gtk3 from "gi://Gtk?version=4.0";
function filter(children) {
  return children.flat(Infinity).map((ch) => ch instanceof Gtk3.Widget ? ch : new Gtk3.Label({ visible: true, label: String(ch) }));
}
Object.defineProperty(Astal5.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = astalify(Astal5.Box, {
  getChildren(self) {
    return self.get_children();
  },
  setChildren(self, children) {
    return self.set_children(filter(children));
  }
});
var Button = astalify(Gtk3.Button);
var CenterBox = astalify(Gtk3.CenterBox, {
  getChildren(box) {
    return [box.startWidget, box.centerWidget, box.endWidget];
  },
  setChildren(box, children) {
    const ch = filter(children);
    box.startWidget = ch[0] || new Gtk3.Box();
    box.centerWidget = ch[1] || new Gtk3.Box();
    box.endWidget = ch[2] || new Gtk3.Box();
  }
});
var Entry = astalify(Gtk3.Entry, {
  getChildren() {
    return [];
  }
});
var Image = astalify(Gtk3.Image, {
  getChildren() {
    return [];
  }
});
var Label = astalify(Gtk3.Label, {
  getChildren() {
    return [];
  },
  setChildren(self, children) {
    self.label = String(children);
  }
});
var LevelBar = astalify(Gtk3.LevelBar, {
  getChildren() {
    return [];
  }
});
var Overlay = astalify(Gtk3.Overlay, {
  getChildren(self) {
    const children = [];
    let ch = self.get_first_child();
    while (ch !== null) {
      children.push(ch);
      ch = ch.get_next_sibling();
    }
    return children.filter((ch2) => ch2 !== self.child);
  },
  setChildren(self, children) {
    for (const child of filter(children)) {
      const types = type in child ? child[type].split(/\s+/) : [];
      if (types.includes("overlay")) {
        self.add_overlay(child);
      } else {
        self.set_child(child);
      }
      self.set_measure_overlay(child, types.includes("measure"));
      self.set_clip_overlay(child, types.includes("clip"));
    }
  }
});
var Revealer = astalify(Gtk3.Revealer);
var Slider = astalify(Astal5.Slider, {
  getChildren() {
    return [];
  }
});
var Stack = astalify(Gtk3.Stack, {
  setChildren(self, children) {
    for (const child of filter(children)) {
      if (child.name != "" && child.name != null) {
        self.add_named(child, child.name);
      } else {
        self.add_child(child);
      }
    }
  }
});
var Switch = astalify(Gtk3.Switch, {
  getChildren() {
    return [];
  }
});
var Window = astalify(Astal5.Window);
var MenuButton = astalify(Gtk3.MenuButton, {
  getChildren(self) {
    return [self.popover, self.child];
  },
  setChildren(self, children) {
    for (const child of filter(children)) {
      if (child instanceof Gtk3.Popover) {
        self.set_popover(child);
      } else {
        self.set_child(child);
      }
    }
  }
});
var Popover = astalify(Gtk3.Popover);

// sass:/home/gegeh/Documents/astal-test/styles/styles.scss
var styles_default = 'window {\n  background-color: transparent;\n  color: #3c3836;\n  font-family: "JetBrainsMono Nerd Font", sans-serif;\n  font-size: 14px;\n}\n\nbutton {\n  background-color: transparent;\n  color: #3c3836;\n  padding: 0;\n  border: none;\n  border-radius: 0;\n}\n\nlabel {\n  background-color: transparent;\n}\n\nbox {\n  background-color: transparent;\n}\n\n.Icon {\n  font-family: "JetBrainsMono Nerd Font Mono", monospace;\n}\n\n.Debug {\n  background-color: red;\n  color: green;\n}\n\nbutton:hover {\n  color: #7e7770;\n}\n\nbutton.Debug {\n  background-color: red;\n  color: green;\n}\n\nbutton.Padding {\n  background-color: transparent;\n  color: #7e7770;\n}\n\nwindow.Bar {\n  padding: 0.5rem 1rem 0.6rem 0.6rem;\n}\nwindow.Bar box.BarCenterbox {\n  background-color: #fbf1c7;\n  color: #3c3836;\n  border-radius: 0.5rem;\n  box-shadow: 5px 5px 0 0 #3c3836;\n}\nwindow.Bar box.BarCenterbox box.BarSection {\n  padding: 0 0.4rem;\n}\nwindow.Bar box.BarCenterbox separator {\n  margin: 0.5rem 0.5rem;\n  min-width: 0.2rem;\n  background-color: #E7DFBE;\n  border-radius: 1rem;\n}\nwindow.Bar box.BarCenterbox box.Launcher button.LauncherButton {\n  font-size: 28px;\n  padding-left: 0.2rem;\n  padding-right: 0.2rem;\n}\nwindow.Bar box.BarCenterbox box.Media box.MediaPlayback {\n  margin: 0 0.4rem 0 0;\n}\nwindow.Bar box.BarCenterbox box.Media box.MediaPlayback button.MediaPlaybackButton {\n  font-size: 22px;\n  padding: 0 0.3rem;\n}\nwindow.Bar box.BarCenterbox box.Media box.MediaPlayback button.MediaPlaybackButton.Disabled {\n  color: #7e7770;\n}\nwindow.Bar box.BarCenterbox box.Media image.MediaImageCoverArt {\n  margin: 0 0.5rem 0 0;\n}\nwindow.Bar box.BarCenterbox box.Media label.MediaTitleButtonLabel {\n  font-size: small;\n  font-weight: 500;\n}\nwindow.Bar box.BarCenterbox box.Workspaces button.WorkspaceButton {\n  color: #A59E86;\n}\nwindow.Bar box.BarCenterbox box.Workspaces button.WorkspaceButton.Active {\n  color: #3c3836;\n}\nwindow.Bar box.BarCenterbox box.Workspaces button.WorkspaceButton.Active > label {\n  text-decoration: underline;\n}\nwindow.Bar box.BarCenterbox box.Workspaces button.WorkspaceButton.HasClient {\n  color: #3c3836;\n}\nwindow.Bar box.BarCenterbox box.FocusedClient label.FocusedClientLabel {\n  font-size: small;\n  font-weight: 500;\n}\nwindow.Bar box.BarCenterbox box.Tray menubutton.TrayMenuButton label.TrayLabelIcon {\n  font-size: 18px;\n}\nwindow.Bar box.BarCenterbox box.Tray menubutton.TrayMenuButton image.TrayImageIcon {\n  min-width: 18px;\n}\n\nwindow.QuickSetting {\n  padding: 0.5rem 1rem 0.6rem 0.6rem;\n}\nwindow.QuickSetting box.QuickSettingContainer {\n  background-color: #fbf1c7;\n  color: #3c3836;\n  padding: 1rem;\n  border-radius: 0.5rem;\n  box-shadow: 5px 5px 0 0 #3c3836;\n}\nwindow.QuickSetting box.QuickSettingContainer button.QuickSettingButton {\n  padding: 0.5rem 1rem;\n  background-color: #E7DFBE;\n  color: #3c3836;\n  min-width: 120px;\n  min-height: 50px;\n  font-size: 14px;\n  border-radius: 0.5rem;\n}\nwindow.QuickSetting box.QuickSettingContainer button.QuickSettingButton:hover {\n  background-color: #7e7770;\n  color: #f2e9d4;\n}\nwindow.QuickSetting box.QuickSettingContainer button.QuickSettingButton.Small {\n  min-width: 60px;\n  min-height: 30px;\n}\nwindow.QuickSetting box.QuickSettingContainer button.QuickSettingButton .Icon {\n  font-size: 24px;\n}\nwindow.QuickSetting box.QuickSettingContainer button.QuickSettingButton .Chevron {\n  font-size: 20px;\n}\nwindow.QuickSetting box.QuickSettingContainer button.QuickSettingButton .Label1 {\n  font-weight: 600;\n}\nwindow.QuickSetting box.QuickSettingContainer button.QuickSettingButton .Label2 {\n  font-size: 12px;\n  color: #7e7770;\n}\nwindow.QuickSetting box.QuickSettingContainer image {\n  color: #3c3836;\n}\nwindow.QuickSetting box.QuickSettingContainer scale {\n  margin: 0;\n  padding: 0;\n}\nwindow.QuickSetting box.QuickSettingContainer scale trough {\n  border-radius: 1rem;\n}\nwindow.QuickSetting box.QuickSettingContainer scale trough highlight {\n  min-height: 20px;\n  min-width: 20px;\n  border-radius: 1rem;\n  outline: unset;\n  background-color: #3c3836;\n}\nwindow.QuickSetting box.QuickSettingContainer scale trough slider {\n  box-shadow: none;\n  outline: unset;\n  border: 0;\n  min-height: 20px;\n  min-width: 20px;\n  background-color: transparent;\n}';

// misc/cursor.ts
var _default = Gdk2.Cursor.new_from_name("default", null);
var pointer = Gdk2.Cursor.new_from_name("pointer", null);
var notAllowed = Gdk2.Cursor.new_from_name("not-allowed", null);

// ../../../../usr/share/astal/gjs/gtk4/jsx-runtime.ts
function Fragment({ children = [], child }) {
  if (child) children.push(child);
  return mergeBindings(children);
}
function jsx2(ctor, props) {
  return jsx(ctors, ctor, props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  // circularprogress: Widget.CircularProgress,
  // drawingarea: Widget.DrawingArea,
  entry: Entry,
  image: Image,
  label: Label,
  levelbar: LevelBar,
  overlay: Overlay,
  revealer: Revealer,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window,
  menubutton: MenuButton,
  popover: Popover
};
var jsxs = jsx2;

// widgets/Bar/Modules/Launcher.tsx
var Launcher = () => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      name: "Launcher",
      cssClasses: ["Launcher"],
      children: /* @__PURE__ */ jsx2(
        "button",
        {
          name: "LauncherButton",
          cssClasses: ["Icon", "LauncherButton"],
          onClicked: () => print("hello"),
          tooltipText: "Launcher",
          cursor: pointer,
          children: /* @__PURE__ */ jsx2("label", { label: "\u{F08C7}" })
        }
      )
    }
  );
};
var Launcher_default = Launcher;

// ../../../../usr/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// ../../../../usr/share/astal/gjs/file.ts
import Astal7 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";

// ../../../../usr/share/astal/gjs/gobject.ts
import GObject2 from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject2;

// widgets/Bar/Modules/Workspaces.tsx
import AstalHyprland from "gi://AstalHyprland?version=0.1";
var maxWorkspaces = 5;
var workspaces = Array.from({ length: maxWorkspaces - 1 }, (_, i) => i);
var hyprland = AstalHyprland.get_default();
var Workspaces = () => {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      name: "Workspaces",
      cssClasses: ["Workspaces"],
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.BASELINE,
      spacing: 3,
      children: [
        workspaces.map((i) => /* @__PURE__ */ jsx2(
          WorkspaceButton,
          {
            workspace: AstalHyprland.Workspace.dummy(i + 1, null)
          }
        )),
        bind(hyprland, "focusedWorkspace").as((focused) => /* @__PURE__ */ jsx2(Fragment, { children: focused && focused.id > maxWorkspaces ? /* @__PURE__ */ jsx2(WorkspaceButton, { workspace: focused }) : /* @__PURE__ */ jsx2(
          WorkspaceButton,
          {
            workspace: AstalHyprland.Workspace.dummy(
              maxWorkspaces,
              null
            )
          }
        ) }))
      ]
    }
  );
};
var WorkspaceButton = ({ workspace }) => {
  const confVar = Variable.derive(
    [bind(hyprland, "focusedWorkspace"), bind(hyprland, "clients")],
    (focused, _clients) => {
      const classes = ["WorkspaceButton"];
      let cursor = pointer;
      let tooltipText = `Switch Workspace ${workspace.id}`;
      if (focused && focused.id === workspace.id) {
        classes.push("Active");
        cursor = _default;
        tooltipText = "";
      }
      const clients = hyprland.get_workspace(workspace.id)?.get_clients() || [];
      if (clients.length > 0) {
        classes.push("HasClient");
      }
      return {
        classes,
        cursor,
        tooltipText
      };
    }
  );
  const conf = confVar();
  return /* @__PURE__ */ jsx2(
    "button",
    {
      name: `WorkspaceButton-${workspace.id}`,
      cssClasses: conf.as((c) => c.classes),
      onClicked: () => {
        if (workspace.id === hyprland.get_focused_workspace()?.id) {
          return;
        }
        workspace.focus();
      },
      onDestroy: () => confVar.drop(),
      tooltipText: conf.as((c) => c.tooltipText),
      cursor: conf.as((c) => c.cursor),
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          label: workspace.name == "10" ? "0" : workspace.name,
          cssClasses: ["WorkspaceButtonLabel"],
          useUnderline: true
        }
      )
    }
  );
};
var Workspaces_default = Workspaces;

// widgets/Bar/Modules/FocusedClient.tsx
import AstalHyprland2 from "gi://AstalHyprland?version=0.1";
import Pango from "gi://Pango?version=1.0";
var hyprland2 = AstalHyprland2.get_default();
var FocusedClient = () => {
  const focusedClient = Variable.derive(
    [bind(hyprland2, "focusedClient"), bind(hyprland2, "clients")],
    (focusedClient2, _clients) => {
      return focusedClient2?.title || "";
    }
  );
  return /* @__PURE__ */ jsx2(
    "box",
    {
      name: "FocusedClient",
      cssClasses: ["FocusedClient"],
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.BASELINE,
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          label: focusedClient(),
          cssClasses: ["FocusedClientLabel"],
          onDestroy: () => focusedClient.drop(),
          maxWidthChars: 36,
          ellipsize: Pango.EllipsizeMode.MIDDLE
        }
      )
    }
  );
};
var FocusedClient_default = FocusedClient;

// widgets/Bar/Start.tsx
var Start = ({ name }) => {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      name: `BarStart-${name}`,
      cssClasses: ["BarSection", "BarStart"],
      hexpand: true,
      children: [
        /* @__PURE__ */ jsx2(Launcher_default, {}),
        /* @__PURE__ */ jsx2(
          Gtk4.Separator,
          {
            orientation: Gtk4.Orientation.VERTICAL,
            visible: true
          }
        ),
        /* @__PURE__ */ jsx2(Workspaces_default, {}),
        /* @__PURE__ */ jsx2(
          Gtk4.Separator,
          {
            orientation: Gtk4.Orientation.VERTICAL,
            visible: true
          }
        ),
        /* @__PURE__ */ jsx2(FocusedClient_default, {})
      ]
    }
  );
};
var Start_default = Start;

// widgets/Bar/Modules/Tray.tsx
import AstalTray from "gi://AstalTray?version=0.1";

// lib/utils.ts
var toTitleCase = (str) => {
  return str.toLowerCase().split(" ").map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(" ");
};
var debounce = (callback, wait) => {
  let timeout2 = null;
  return (...args) => {
    clearTimeout(timeout2);
    timeout2 = setTimeout(() => {
      callback(...args);
    }, wait);
  };
};

// widgets/Bar/Modules/Tray.tsx
var USE_CUSTOM_ICONS = [/steam/i];
var CUSTOM_ICONS = {
  discord: "\uF1FF",
  steam: "\uF1B6",
  spotify: "\uF1BC"
};
var getSearchWith = (item) => {
  const title = item.title;
  const tooltipMarkup = item.tooltipMarkup;
  return title && title.length ? title : tooltipMarkup;
};
var shouldUseCustomIcon = (item) => {
  const searchWith = getSearchWith(item);
  return USE_CUSTOM_ICONS.some((regex) => searchWith.match(regex));
};
var getCustomIcon = (item) => {
  const searchWith = getSearchWith(item);
  for (const [key, value] of Object.entries(CUSTOM_ICONS)) {
    if (searchWith.match(new RegExp(key, "i"))) {
      return value;
    }
  }
  return "\u{F082B}";
};
var getTooltipMarkup = (item) => {
  return toTitleCase(getSearchWith(item));
};
var ImageIcon = ({ item }) => {
  if (shouldUseCustomIcon(item)) {
    return /* @__PURE__ */ jsx2(
      "label",
      {
        cssClasses: ["TrayLabelIcon"],
        label: getCustomIcon(item)
      }
    );
  }
  return /* @__PURE__ */ jsx2(
    "image",
    {
      gicon: bind(item, "gicon"),
      cssClasses: ["TrayImageIcon"],
      pixelSize: 18
    }
  );
};
var MenuButton2 = ({ item }) => {
  return /* @__PURE__ */ jsxs(
    "menubutton",
    {
      setup: (self) => {
        self.insert_action_group("dbusmenu", item.actionGroup);
      },
      cursor: pointer,
      tooltipMarkup: getTooltipMarkup(item),
      cssClasses: ["TrayMenuButton"],
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.CENTER,
      children: [
        /* @__PURE__ */ jsx2(ImageIcon, { item }),
        Gtk4.PopoverMenu.new_from_model(item.menuModel)
      ]
    }
  );
};
var Tray = () => {
  const tray = AstalTray.get_default();
  return /* @__PURE__ */ jsx2(
    "box",
    {
      name: "Tray",
      cssClasses: ["Tray"],
      spacing: 10,
      valign: Gtk4.Align.CENTER,
      children: bind(tray, "items").as(
        (items) => items.map((item) => /* @__PURE__ */ jsx2(MenuButton2, { item }))
      )
    }
  );
};
var Tray_default = Tray;

// widgets/Bar/Modules/Media.tsx
import AstalMpris from "gi://AstalMpris";
import Pango2 from "gi://Pango?version=1.0";
var Media = ({ player }) => {
  if (!player) {
    return /* @__PURE__ */ jsx2("box", {});
  }
  const coverArt = bind(player, "coverArt");
  const title = bind(player, "title").as((t) => t);
  const playIcon = bind(player, "playbackStatus").as(
    (s) => s === AstalMpris.PlaybackStatus.PLAYING ? "\uF04B" : "\uF04C"
  );
  const goPrevCursor = bind(player, "canGoPrevious").as(
    (canGo) => canGo ? pointer : notAllowed
  );
  const goNextCursor = bind(player, "canGoNext").as(
    (canGo) => canGo ? pointer : notAllowed
  );
  const classessVars = Variable.derive(
    [bind(player, "canGoPrevious"), bind(player, "canGoNext")],
    (canGoPrev, canGoNext) => {
      const classes = ["Icon", "MediaPlaybackButton"];
      return {
        goPrev: canGoPrev ? classes : [...classes, "Disabled"],
        goNext: canGoNext ? classes : [...classes, "Disabled"]
      };
    }
  );
  const classess = classessVars();
  return /* @__PURE__ */ jsxs("box", { name: "Media", valign: Gtk4.Align.CENTER, cssClasses: ["Media"], children: [
    /* @__PURE__ */ jsxs(
      "box",
      {
        name: "MediaPlayback",
        cssClasses: ["MediaPlayback"],
        onDestroy: () => classessVars.drop(),
        children: [
          /* @__PURE__ */ jsx2(
            "button",
            {
              name: "MediaPlaybackButtonPrevious",
              cssClasses: classess.as((c) => c.goPrev),
              onClicked: () => player.get_can_go_previous() && player.previous(),
              tooltipText: "Previous Track",
              halign: Gtk4.Align.CENTER,
              cursor: goPrevCursor,
              children: /* @__PURE__ */ jsx2("label", { label: "\uF04A", hexpand: true })
            }
          ),
          /* @__PURE__ */ jsx2(
            "button",
            {
              name: "MediaPlaybackButtonPlayPause",
              cssClasses: ["Icon", "MediaPlaybackButton"],
              onClicked: () => player.play_pause(),
              tooltipText: "Play/Pause",
              halign: Gtk4.Align.CENTER,
              cursor: pointer,
              children: /* @__PURE__ */ jsx2("label", { label: playIcon, hexpand: true })
            }
          ),
          /* @__PURE__ */ jsx2(
            "button",
            {
              name: "MediaPlaybackButtonNext",
              cssClasses: classess.as((c) => c.goNext),
              onClicked: () => player.get_can_go_next() && player.next(),
              tooltipText: "Next Track",
              halign: Gtk4.Align.CENTER,
              cursor: goNextCursor,
              children: /* @__PURE__ */ jsx2("label", { label: "\uF04E", hexpand: true })
            }
          )
        ]
      }
    ),
    /* @__PURE__ */ jsx2(
      "button",
      {
        onClicked: () => player.get_can_raise() && player.raise(),
        cursor: pointer,
        children: /* @__PURE__ */ jsx2(
          "image",
          {
            name: "MediaImageCoverArt",
            cssClasses: ["MediaImageCoverArt"],
            file: coverArt,
            pixelSize: 32,
            overflow: Gtk4.Overflow.HIDDEN,
            visible: true
          }
        )
      }
    ),
    /* @__PURE__ */ jsx2(
      "button",
      {
        name: "MediaTitleButton",
        cssClasses: ["MediaTitleButton"],
        cursor: pointer,
        onClicked: () => player.get_can_raise() && player.raise(),
        children: /* @__PURE__ */ jsx2(
          "label",
          {
            name: "MediaTitleButtonLabel",
            cssClasses: ["MediaTitleButtonLabel"],
            label: title,
            halign: Gtk4.Align.CENTER,
            valign: Gtk4.Align.CENTER,
            maxWidthChars: 36,
            ellipsize: Pango2.EllipsizeMode.MIDDLE
          }
        )
      }
    )
  ] });
};
var Media_default = Media;

// widgets/Bar/Center.tsx
import AstalMpris2 from "gi://AstalMpris?version=0.1";
var Center = ({ name }) => {
  const mpris = AstalMpris2.get_default();
  return /* @__PURE__ */ jsxs(
    "box",
    {
      name: `BarCenter-${name}`,
      cssClasses: ["BarSection", "BarCenter"],
      hexpand: true,
      halign: Gtk4.Align.CENTER,
      children: [
        bind(mpris, "players").as((players) => /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx2(Media_default, { player: players[0] }),
          players[0] && /* @__PURE__ */ jsx2(
            Gtk4.Separator,
            {
              orientation: Gtk4.Orientation.VERTICAL,
              visible: true
            }
          )
        ] })),
        /* @__PURE__ */ jsx2(Tray_default, {})
      ]
    }
  );
};
var Center_default = Center;

// widgets/Bar/Modules/Time.tsx
var datetime = Variable({
  date: "",
  time: ""
}).poll(1e3, "date +'%a, %b %d|%H:%M:%S'", (output) => {
  const [date, time] = output.split("|");
  return { date, time };
});
var Time2 = ({ monitor }) => {
  const _datetime = datetime();
  return /* @__PURE__ */ jsx2(
    "box",
    {
      name: `Time`,
      cssClasses: ["BarSection", "BarEnd"],
      hexpand: true,
      children: /* @__PURE__ */ jsx2(
        "button",
        {
          name: "End-Button",
          onClicked: () => {
            app_default.toggle_window(`QuickSetting-${monitor}`);
          },
          children: /* @__PURE__ */ jsxs("box", { children: [
            /* @__PURE__ */ jsx2("label", { label: _datetime.as((d) => d.date + " ") }),
            /* @__PURE__ */ jsx2("label", { label: _datetime.as((d) => d.time) })
          ] })
        }
      )
    }
  );
};
var Time_default = Time2;

// widgets/Bar/End.tsx
var End = ({ name, monitor }) => {
  return /* @__PURE__ */ jsx2(
    "box",
    {
      name: `BarEnd-${name}`,
      cssClasses: ["BarSection", "BarEnd"],
      hexpand: true,
      halign: Gtk4.Align.END,
      children: /* @__PURE__ */ jsx2(Time_default, { monitor })
    }
  );
};
var End_default = End;

// widgets/Bar/Bar.tsx
var Bar = ({ gdkmonitor }) => {
  const { TOP, LEFT, RIGHT } = Astal6.WindowAnchor;
  const name = gdkmonitor.manufacturer;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name: `Bar-${name}`,
      namespace: "Bar",
      application: app_default,
      cssClasses: ["Bar"],
      gdkmonitor,
      anchor: TOP | LEFT | RIGHT,
      exclusivity: Astal6.Exclusivity.EXCLUSIVE,
      visible: true,
      setup: (self) => {
        self.set_default_size(1, 1);
      },
      children: /* @__PURE__ */ jsx2(
        "centerbox",
        {
          name: `Bar-${name}`,
          cssClasses: ["BarCenterbox"],
          startWidget: /* @__PURE__ */ jsx2(Start_default, { name }),
          centerWidget: /* @__PURE__ */ jsx2(Center_default, { name }),
          endWidget: /* @__PURE__ */ jsx2(End_default, { name, monitor: gdkmonitor.manufacturer })
        }
      )
    }
  );
};
var Bar_default = Bar;

// widgets/commons/Popover.tsx
var Popover2 = ({
  child,
  name,
  gdkmonitor,
  visible,
  cssClasses
}) => {
  const { TOP, RIGHT, BOTTOM, LEFT } = Astal6.WindowAnchor;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name,
      namespace: "Popover",
      application: app_default,
      cssClasses: ["Popover", ...cssClasses || []],
      gdkmonitor,
      layer: Astal6.Layer.TOP,
      keymode: Astal6.Keymode.ON_DEMAND,
      anchor: TOP | RIGHT | BOTTOM | LEFT,
      visible: visible || false,
      setup: (self) => {
        self.set_default_size(1, 1);
      },
      onKeyPressed: (_event, keyval) => {
        if (keyval === Gdk2.KEY_Escape) {
          app_default.toggle_window(name);
        }
      },
      children: /* @__PURE__ */ jsxs("box", { cssClasses: [], children: [
        /* @__PURE__ */ jsx2(Padding, { name }),
        /* @__PURE__ */ jsxs("box", { vertical: true, hexpand: false, children: [
          child,
          /* @__PURE__ */ jsx2(Padding, { name })
        ] })
      ] })
    }
  );
};
var Padding = ({ name }) => {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      cssClasses: ["Padding", "Debug"],
      canFocus: false,
      onClicked: () => {
        app_default.toggle_window(name);
      },
      hexpand: true,
      vexpand: true
    }
  );
};
var Popover_default = Popover2;

// widgets/QuickSetting/Button.tsx
var Button2 = ({ icon, label1, label2 }) => {
  return /* @__PURE__ */ jsx2("button", { cssClasses: ["QuickSettingButton"], hexpand: true, children: /* @__PURE__ */ jsxs("box", { spacing: 16, halign: Gtk4.Align.FILL, valign: Gtk4.Align.CENTER, children: [
    /* @__PURE__ */ jsx2("label", { cssClasses: ["Icon"], label: icon }),
    /* @__PURE__ */ jsxs(
      "box",
      {
        cssClasses: ["Labels"],
        vertical: true,
        valign: Gtk4.Align.CENTER,
        halign: Gtk4.Align.START,
        hexpand: true,
        children: [
          /* @__PURE__ */ jsx2(
            "label",
            {
              cssClasses: ["Label1"],
              halign: Gtk4.Align.START,
              label: label1
            }
          ),
          /* @__PURE__ */ jsx2(
            "label",
            {
              maxWidthChars: 15,
              cssClasses: ["Label2"],
              halign: Gtk4.Align.START,
              label: label2
            }
          )
        ]
      }
    ),
    /* @__PURE__ */ jsx2("label", { cssClasses: ["Icon", "Chevron"], label: "\uF054" })
  ] }) });
};
var Button_default = Button2;

// widgets/QuickSetting/ButtonSmall.tsx
var ButtonSmall = ({ icon }) => {
  return /* @__PURE__ */ jsx2("button", { cssClasses: ["QuickSettingButton", "Small"], hexpand: true, children: /* @__PURE__ */ jsx2("box", { cssClasses: ["Icon"], halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(
    "label",
    {
      cssClasses: [""],
      label: icon,
      hexpand: true,
      vexpand: false
    }
  ) }) });
};
var ButtonSmall_default = ButtonSmall;

// widgets/QuickSetting/QuickSetting.tsx
import AstalWp from "gi://AstalWp?version=0.1";
var QuickSetting = ({ gdkmonitor, visible }) => {
  const monitor = gdkmonitor.manufacturer;
  const speaker2 = AstalWp.get_default()?.audio.defaultSpeaker;
  const debouncedSetVolume = debounce((value) => {
    speaker2.volume = value;
  }, 100);
  return /* @__PURE__ */ jsx2(
    Popover_default,
    {
      name: `QuickSetting-${monitor}`,
      gdkmonitor,
      visible,
      cssClasses: ["QuickSetting"],
      children: /* @__PURE__ */ jsxs(
        "box",
        {
          cssClasses: ["QuickSettingContainer"],
          vertical: true,
          spacing: 10,
          children: [
            /* @__PURE__ */ jsxs(
              "box",
              {
                cssClasses: ["QuickSettingRow"],
                hexpand: true,
                halign: Gtk4.Align.CENTER,
                spacing: 10,
                children: [
                  /* @__PURE__ */ jsx2(Button_default, { icon: "\u{F05A9}", label1: "Wi-Fi", label2: "TSL77" }),
                  /* @__PURE__ */ jsx2(
                    Button_default,
                    {
                      icon: "\u{F00AF}",
                      label1: "Bluetooth",
                      label2: "Nokia E3511"
                    }
                  )
                ]
              }
            ),
            /* @__PURE__ */ jsxs("box", { cssClasses: ["QuickSettingRow"], spacing: 10, children: [
              /* @__PURE__ */ jsx2(ButtonSmall_default, { icon: "\u{F0499}" }),
              /* @__PURE__ */ jsx2(ButtonSmall_default, { icon: "\u{F009C}" }),
              /* @__PURE__ */ jsx2(ButtonSmall_default, { icon: "\u{F020A}" })
            ] }),
            /* @__PURE__ */ jsxs("box", { cssClasses: ["QuickSettingRow"], spacing: 10, children: [
              /* @__PURE__ */ jsx2(ButtonSmall_default, { icon: "\u{F0080}" }),
              /* @__PURE__ */ jsx2(ButtonSmall_default, { icon: "\u{F04C3}" }),
              /* @__PURE__ */ jsx2(ButtonSmall_default, { icon: "\u{F18F4}" })
            ] }),
            /* @__PURE__ */ jsx2(
              "box",
              {
                cssClasses: ["QuickSettingRow"],
                spacing: 10,
                vertical: true,
                children: /* @__PURE__ */ jsxs("box", { valign: Gtk4.Align.CENTER, spacing: 10, children: [
                  /* @__PURE__ */ jsx2(
                    "image",
                    {
                      iconName: bind(speaker2, "volumeIcon"),
                      valign: Gtk4.Align.CENTER,
                      iconSize: Gtk4.IconSize.LARGE,
                      pixelSize: 20
                    }
                  ),
                  /* @__PURE__ */ jsx2(
                    "slider",
                    {
                      onChangeValue: (self) => {
                        debouncedSetVolume(self.value);
                      },
                      value: bind(speaker2, "volume"),
                      hexpand: true
                    }
                  )
                ] })
              }
            )
          ]
        }
      )
    }
  );
};
var QuickSettingInit = ({ gdkmonitor }) => {
  const w = QuickSetting({
    gdkmonitor
    // visible: gdkmonitor.manufacturer === "HKC OVERSEAS LIMITED",
  });
  app_default.connect("window-toggled", (_source, window) => {
    if (window.get_name() === `QuickSetting-${gdkmonitor.manufacturer}`) {
    }
  });
  return w;
};
var QuickSetting_default = QuickSettingInit;

// app.tsx
import AstalHyprland4 from "gi://AstalHyprland?version=0.1";
import AstalTray2 from "gi://AstalTray?version=0.1";

// widgets/commons/Osd.tsx
var Osd = ({
  child,
  name,
  gdkmonitor,
  cssClasses,
  revealer,
  visible
}) => {
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name,
      namespace: "OSD",
      application: app_default,
      cssClasses: ["OSD", ...cssClasses || []],
      gdkmonitor,
      layer: Astal6.Layer.OVERLAY,
      anchor: Astal6.WindowAnchor.BOTTOM,
      visible: true,
      marginBottom: gdkmonitor.geometry.height / 2,
      children: /* @__PURE__ */ jsx2(
        "button",
        {
          onClicked: () => {
            console.log("OSD button clicked");
            visible.set(false);
          },
          children: /* @__PURE__ */ jsx2(
            "revealer",
            {
              setup: revealer,
              revealChild: visible(),
              transitionType: Gtk4.RevealerTransitionType.SLIDE_UP,
              transition_duration: 500,
              children: child
            }
          )
        }
      )
    }
  );
};
var Osd_default = Osd;

// widgets/Osd/Volume.tsx
import AstalWp2 from "gi://AstalWp?version=0.1";
import AstalHyprland3 from "gi://AstalHyprland?version=0.1";
var speaker = AstalWp2.get_default().get_default_speaker();
var hyprland3 = AstalHyprland3.get_default();
var VolumeComponent = ({ gdkmonitor }) => {
  const monitor = gdkmonitor.manufacturer;
  const visible = Variable(false);
  const iconName = Variable("");
  const value = Variable(0);
  let firstTime = true;
  let count = 0;
  function show(v, icon) {
    if (firstTime) {
      firstTime = false;
      return;
    }
    const window = app_default.get_window(`Volume-${monitor}`);
    window?.set_visible(true);
    visible.set(true);
    value.set(v);
    iconName.set(icon);
    count++;
    timeout(2e3, () => {
      count--;
      if (count === 0) {
        visible.set(false);
        timeout(499, () => {
          window?.set_visible(false);
        });
      }
    });
  }
  return /* @__PURE__ */ jsx2(
    Osd_default,
    {
      name: `Volume-${monitor}`,
      gdkmonitor,
      cssClasses: ["Volume"],
      revealer: (self) => {
        if (speaker) {
          speaker.connect("notify::volume", () => {
            const focusedMon = hyprland3.get_focused_monitor();
            if (focusedMon.name !== gdkmonitor.connector) {
              return;
            }
            show(speaker.volume, speaker.volumeIcon);
          });
        }
      },
      visible,
      children: /* @__PURE__ */ jsxs("box", { spacing: 10, children: [
        /* @__PURE__ */ jsx2("image", { iconName: iconName() }),
        /* @__PURE__ */ jsx2(
          "levelbar",
          {
            valign: Gtk4.Align.CENTER,
            widthRequest: 100,
            value: value()
          }
        ),
        /* @__PURE__ */ jsx2("label", { label: value((v) => `${Math.floor(v * 100)}%`) })
      ] })
    }
  );
};
var Volume = ({ gdkmonitor }) => {
  const w = VolumeComponent({
    gdkmonitor
  });
  app_default.connect("window-toggled", (_source, window) => {
    if (window.get_name() === `Volume-${gdkmonitor.manufacturer}`) {
    }
  });
  return w;
};
var Volume_default = Volume;

// app.tsx
function initMonitor(gdkmonitor) {
  return [
    Bar_default({ gdkmonitor }),
    QuickSetting_default({ gdkmonitor }),
    Volume_default({ gdkmonitor })
  ];
}
var hyprland4 = AstalHyprland4.get_default();
var windows = /* @__PURE__ */ new Map();
var hyprMonitors = /* @__PURE__ */ new Map();
function onMonitorAdded(_source, monitor) {
  hyprMonitors.set(monitor.id, monitor);
  console.log("monitor added", monitor.id, monitor.name);
  const gdkmonitor = app_default.get_monitors().find(
    (m) => m.connector === monitor.name
  );
  if (gdkmonitor) {
    windows.set(gdkmonitor, initMonitor(gdkmonitor));
  }
}
function onMonitorRemoved(_source, id) {
  const monitor = hyprMonitors.get(id);
  if (!monitor) {
    console.warn("Monitor with id", id, "not found");
    return;
  }
  console.log("monitor removed", monitor.id, monitor.name);
  const gdkmonitor = app_default.get_monitors().find(
    (m) => m.connector === monitor.name
  );
  if (gdkmonitor) {
    console.log("gdkmonitor found", gdkmonitor.connector);
    const windowsToRemove = windows.get(gdkmonitor);
    if (windowsToRemove) {
      console.log("removing windows for", gdkmonitor.connector);
      windowsToRemove.forEach((window) => window.destroy());
      console.log("windows removed for", gdkmonitor.connector);
      windows.delete(gdkmonitor);
      console.log("gdkmonitor removed", gdkmonitor.connector);
    }
  }
  console.log("deleting monitor from hyprMonitors", id);
  hyprMonitors.delete(id);
  console.log("monitor removed from hyprMonitors", id);
}
function reinit() {
  windows.forEach((winList, gdkmonitor) => {
    console.log("removing windows for", gdkmonitor.connector);
    winList.forEach((window) => window.destroy());
    windows.delete(gdkmonitor);
    console.log("windows removed for", gdkmonitor.connector);
  });
  hyprland4.get_monitors().forEach((monitor) => {
    console.log("monitor name", monitor.id, monitor.name);
    const gdkmonitor = app_default.get_monitors().find(
      (m) => m.connector === monitor.name
    );
    if (gdkmonitor) {
      windows.set(gdkmonitor, initMonitor(gdkmonitor));
    }
  });
}
app_default.start({
  instanceName: "Ass",
  css: styles_default,
  main() {
    hyprland4.get_monitors().forEach((monitor) => {
      hyprMonitors.set(monitor.id, monitor);
      console.log("monitor name", monitor.id, monitor.name);
      const gdkmonitor = app_default.get_monitors().find(
        (m) => m.connector === monitor.name
      );
      if (gdkmonitor) {
        windows.set(gdkmonitor, initMonitor(gdkmonitor));
      }
    });
    hyprland4.connect("monitor-added", onMonitorAdded);
    hyprland4.connect("monitor-removed", onMonitorRemoved);
  },
  requestHandler(request, res) {
    if (request == "say hi") {
      return res("Hello from Astaltes!");
    }
    if (request === "tray") {
      const tray = AstalTray2.get_default();
      const items = tray.get_items();
      if (items.length === 0) {
        return res("No tray items found");
      }
      const titles = items.map((item) => item.title).join(", ");
      const tooltips = items.map((item) => item.tooltipMarkup).join(", ");
      const iconNames = items.map((item) => item.iconName).join(", ");
      const iconPaths = items.map((item) => item.iconThemePath).join(", ");
      const jsons = items.map((item) => item.to_json_string()).join(",");
      return res(`Tray items: ${titles}
                
Tooltips: ${tooltips}
                
Icons: ${iconNames}
                
Icon Paths: ${iconPaths}
                
JSONs: [${jsons}]`);
    }
    if (request == "reinit") {
      reinit();
      return res("Reinitialized monitors");
    }
    if (request.includes("rmmonitor")) {
      const id = parseInt(request.split("rmmonitor")[1].trim(), 10);
      if (isNaN(id)) {
        return res("Invalid monitor ID");
      }
      onMonitorRemoved(hyprland4, id);
      return res("Monitor removed");
    }
    if (request.includes("addmonitor")) {
      const id = parseInt(request.split("addmonitor")[1].trim(), 10);
      if (isNaN(id)) {
        return res("Invalid monitor ID");
      }
      const monitor = hyprland4.get_monitor(id);
      if (monitor) {
        onMonitorAdded(hyprland4, monitor);
        return res("Monitor added");
      }
      return res("No monitor to add");
    }
    res("Unknown request");
  }
});
//# sourceMappingURL=data:application/json;base64,
